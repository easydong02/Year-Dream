{"cells":[{"cell_type":"markdown","metadata":{"id":"gkrOA3DckInF"},"source":["## Iteration(while, For)"]},{"cell_type":"markdown","metadata":{"id":"mtXkUXvIkInJ"},"source":["### 1. `while` statement"]},{"cell_type":"markdown","metadata":{"id":"ls3vASjdkInK"},"source":["- while문은 **조건을 만족할 때 까지 반복**한다.\n","\n","\n","- while (조건):\n","       <statement1>\n","       <statement2>\n","       <statement3>\n","           \n","- 조건이 만족하는 동안(while) statement1, 2, 3을 반복한다."]},{"cell_type":"markdown","metadata":{"id":"TIWjnK1VkInK"},"source":["#### 구구단을 통해 연습해봅시다!"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"vI78_M1ekInK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650193789835,"user_tz":-540,"elapsed":268,"user":{"displayName":"DONG HEE SHIN","userId":"03810046734519443823"}},"outputId":"e440c93f-1ba6-4d0e-e952-c4fd96578b87"},"outputs":[{"output_type":"stream","name":"stdout","text":["2 x 1 = 2\n","2 x 2 = 4\n","2 x 3 = 6\n","2 x 4 = 8\n","2 x 5 = 10\n","2 x 6 = 12\n","2 x 7 = 14\n","2 x 8 = 16\n","2 x 9 = 18\n"]}],"source":["# 2단을 while문으로 구현해봅시다.\n","number = 0\n","while number<9:\n","    number= number+1\n","    print(\"2 x %d = %d\" %(number,2*number))\n"," "]},{"cell_type":"markdown","metadata":{"id":"cW2Gd6X6kInL"},"source":["#### 실제 자판기 기계는 돈을 한번 넣고 종료되지 않는다. 자판기 기계(프로그램)이 종료되는 경우는 커피가 다 떨어졌을 때이다.\n","\n","> Q. 커피가 다 질때까지 자판기 프로그램을 반복하면서 실행한 뒤, 돈을 입력받아서 커피를 주는 프로그램을 작성해보자."]},{"cell_type":"code","execution_count":5,"metadata":{"id":"zqLVUh-JkInM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650194619523,"user_tz":-540,"elapsed":10255,"user":{"displayName":"DONG HEE SHIN","userId":"03810046734519443823"}},"outputId":"15d2f3a1-8f7c-4dbb-cd7e-93dd6e47c7c8"},"outputs":[{"output_type":"stream","name":"stdout","text":["금액을 입력해주세요 : 1000\n","Coffee\n","700원을 돌려줍니다.\n","금액을 입력해주세요 : 500\n","Coffee\n","200원을 돌려줍니다.\n","금액을 입력해주세요 : 500\n","Coffee\n","200원을 돌려줍니다.\n","금액을 입력해주세요 : 500\n","Coffee\n","200원을 돌려줍니다.\n","금액을 입력해주세요 : 500\n","Coffee\n","200원을 돌려줍니다.\n","커피가 모두 소진되었으니, 관리자에게 문의해주세요.\n"]}],"source":["# 자판기의 커피 수량\n","coffee = 5\n","\n","# 커피가 남아있는 동안 작동!\n","while coffee > 0:\n","\n","    # 실제로는 자판기를 통해서 넣은 금액.\n","    money = int(input(\"금액을 입력해주세요 : \"))\n","    \n","    if money == 300:\n","        # 실제로 이 파트는 자판기에서 커피를 뽑는 명령으로 대체된다.\n","\n","        # 이제 커피를 하나씩 줄인다.\n","        coffee= coffee -1\n","\n","    elif money < 300:\n","        # 실제로 이 파트는 돈을 반환한다.\n","        print(\"%d원을 돌려줍니다.\" % money)\n","        \n","     \n","    else: # or elif money > 300:\n","\n","        # 커피를 뽑아주고\n","        print(\"Coffee\")\n","        # 이제 커피를 하나씩 줄인다.\n","        coffee= coffee -1\n","        # 거스름돈을 돌려준다.\n","        print(\"%d원을 돌려줍니다.\" %(money-300))\n","    # 커피가 다 떨어진 경우 알려야한다.\n","print(\"커피가 모두 소진되었으니, 관리자에게 문의해주세요.\")"]},{"cell_type":"markdown","metadata":{"id":"iZgZ2ODQkInN"},"source":["### 2. `for` statement"]},{"cell_type":"markdown","metadata":{"id":"KDtdz3TSkInN"},"source":["- while문은 조건이 만족하는 동안 반복을 수행했지만, for문은 지정 횟수동안 반복을 수행한다.\n","> 여기서 지정된 횟수라는 것은 반복 대상의 크기가 된다.\n","\n","\n","- 보통 iteratable object(반복 가능한 객체)를 대상으로 수행되며, 연속형 데이터 타입 변수들이 여기에 해당된다.\n","> List, Tuple, string, ...\n","\n","\n","- for 변수 in 리스트(튜플, 문자열, iterator):\n","      <statement1>\n","      <statement2>\n","      <statement3>\n","          \n","- 리스트(나 반복가능한 변수들)의 모든 원소를 (자동으로 끝까지) 반복한다."]},{"cell_type":"code","execution_count":6,"metadata":{"id":"nfCa2WREkInN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650194921196,"user_tz":-540,"elapsed":310,"user":{"displayName":"DONG HEE SHIN","userId":"03810046734519443823"}},"outputId":"da5e0e4c-00fa-4ea8-8777-cb079390dc68"},"outputs":[{"output_type":"stream","name":"stdout","text":["1\n","2\n","3\n"]}],"source":["# 원소가 1, 2, 3인 리스트의 원소를 하나하나 출력하는 반복문을 만든다.\n","L = [1, 2, 3]\n","for i in L:\n","    print(i)"]},{"cell_type":"markdown","metadata":{"id":"5nqRCpEXkInO"},"source":["#### 6개의 커피 음료가 담긴 리스트가 있다. 카페에 있는 모든 음료를 출력해보자!"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"iSuqlRBwkInO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650195071464,"user_tz":-540,"elapsed":309,"user":{"displayName":"DONG HEE SHIN","userId":"03810046734519443823"}},"outputId":"1a50474e-9551-4220-c104-92c5dde6a8c4"},"outputs":[{"output_type":"stream","name":"stdout","text":["아메리카노\n","카페라떼\n","카페모카\n","바닐라라떼\n","핸드드립\n","콜드브루\n"]}],"source":["coffees = ['아메리카노', '카페라떼', '카페모카', '바닐라라떼', '핸드드립', '콜드브루']\n","for coffee in coffees:\n","    print(coffee)"]},{"cell_type":"markdown","metadata":{"id":"mouwfUf0kInO"},"source":["#### for문의 단짝 range() 함수"]},{"cell_type":"markdown","metadata":{"id":"lm_EMsqJkInO"},"source":["- for문은 특정 횟수동안 반복을 하기 때문에, 횟수를 자동으로 만들어주는 기능이 있으면 좋다.\n","\n","- 파이썬에서 기본적으로 제공하는 range 함수는 특정 숫자 범위내의 값들을 자동으로 생성해주는 함수이다.\n","\n","\n","e.g. range(1, 5)는 1, 2, 3, 4를 차례대로 생성해준다. (5는 범위에서 제외된다. 즉, 마지막 숫자는 제외된다. 1 <= x < 5)"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"buAK4mW-kInP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650195121056,"user_tz":-540,"elapsed":3,"user":{"displayName":"DONG HEE SHIN","userId":"03810046734519443823"}},"outputId":"e0016ff2-8865-40d0-c1c2-5ace084df41f"},"outputs":[{"output_type":"stream","name":"stdout","text":["0\n","1\n","2\n","3\n"]}],"source":["# range 함수를 이용해 1부터 4까지 출력하는 프로그램을 작성해보자. for문을 이용해서!\n","for i in range(4):\n","    print(i)"]},{"cell_type":"markdown","metadata":{"id":"FM9yUoBykInP"},"source":["#### 6개의 커피 음료와 음료의 가격이 담긴 리스트가 있다. 가지고 있는 돈이 5,000원일 때 먹을 수 있는 모든 음료를 찾아보자!"]},{"cell_type":"code","execution_count":11,"metadata":{"id":"rgPKn43YkInP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650195621640,"user_tz":-540,"elapsed":2087,"user":{"displayName":"DONG HEE SHIN","userId":"03810046734519443823"}},"outputId":"6e98ee17-96dd-4f82-f472-23771aa77f6c"},"outputs":[{"output_type":"stream","name":"stdout","text":["내가 가진 돈을 입력하세요5000\n","['아메리카노', '카페라떼', '카페모카', '콜드브루']\n"]}],"source":["coffees = ['아메리카노', '카페라떼', '카페모카', '바닐라라떼', '핸드드립', '콜드브루']\n","prices = [4100, 4600, 4600, 5100, 6000, 5000]\n","\n","money = int(input(\"내가 가진 돈을 입력하세요\"))\n","available = []\n","cnt=0\n","for price in prices:\n","    if money>= price:\n","        available.append(coffees[cnt])\n","    cnt = cnt+1\n","\n","print(available)"]},{"cell_type":"markdown","metadata":{"id":"o-lUiJGSkInP"},"source":["#### RE : 6개의 커피 음료와 음료의 가격이 담긴 리스트가 있다. 오늘은 할인 행사를 하여 모든 음료가 500원 할인 되었다!\n","\n","#### 가지고 있는 돈이 5,000원일 때 먹을 수 있는 모든 음료를 찾아보자!"]},{"cell_type":"code","execution_count":20,"metadata":{"id":"eULxqazskInQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650196109853,"user_tz":-540,"elapsed":5,"user":{"displayName":"DONG HEE SHIN","userId":"03810046734519443823"}},"outputId":"3561460a-7ac8-4e4f-cd37-cf0e652421b8"},"outputs":[{"output_type":"stream","name":"stdout","text":["아메리카노\n","카페라떼\n","카페모카\n","바닐라라떼\n","콜드브루\n","-------------------\n","아메리카노\n","카페라떼\n","카페모카\n","바닐라라떼\n","콜드브루\n","-------------------\n","아메리카노\n","카페라떼\n","카페모카\n","바닐라라떼\n","콜드브루\n"]}],"source":["coffees = ['아메리카노', '카페라떼', '카페모카', '바닐라라떼', '핸드드립', '콜드브루']\n","prices = [4100, 4600, 4600, 5100, 6000, 5000]\n","\n","# 1. index를 사용하는 방법\n","for i in range(len(coffees)):\n","    if prices[i] -500 <=5000:\n","        print(coffees[i])\n","print(\"-------------------\")\n","# 2. enumerate를 사용하는 방법\n","for idx, price in enumerate(prices):\n","    if price -500 <=5000:\n","        print(coffees[idx])\n","\n","print(\"-------------------\")\n","\n","\n","# 3. zip()을 이용하기 이것은 value를 반환\n","for coffee,price in zip(coffees,prices):\n","    if price -500 <=5000:\n","        print(coffee)"]},{"cell_type":"markdown","metadata":{"id":"jVZVPTTekInQ"},"source":["#### 반복문을 제어하는 break, continue"]},{"cell_type":"markdown","metadata":{"id":"Oq5cn5HRkInQ"},"source":["- 만약 반복문을 수행하다가 더 이상 반복이 필요없는 경우에는 어떻게 해야할까?\n","\n","> **break statement**\n","\n","- 만약 반복문을 수행하다가 특정 조건에만 건너뛰고 싶은 경우에는 어떻게 해야할까?\n","\n","> **continue statement**"]},{"cell_type":"markdown","metadata":{"id":"O9XXQ4lvkInQ"},"source":["#### RE : 실제 자판기 기계는 돈을 한번 넣고 종료되지 않는다. 자판기 기계(프로그램)이 종료되는 경우는 커피가 다 떨어졌을 때이다.\n","\n","> Q. 커피가 다 떨어질 때 까지 자판기 프로그램을 반복하면서 실행한 뒤, 돈을 입력받아서 커피를 주는 프로그램을 작성해보자."]},{"cell_type":"code","execution_count":21,"metadata":{"id":"IbK1uE_-kInQ","colab":{"base_uri":"https://localhost:8080/","height":781},"executionInfo":{"status":"error","timestamp":1650196303890,"user_tz":-540,"elapsed":31543,"user":{"displayName":"DONG HEE SHIN","userId":"03810046734519443823"}},"outputId":"e2f5c5ff-f227-40e8-b645-c495e2c2e042"},"outputs":[{"output_type":"stream","name":"stdout","text":["금액을 입력하세요.500\n","Coffee\n","200원을 반환합니다.\n","금액을 입력하세요.300\n","Coffee\n","금액을 입력하세요.400\n","Coffee\n","100원을 반환합니다.\n","금액을 입력하세요.100\n","100원을 반환합니다.\n","금액을 입력하세요.300\n","Coffee\n","금액을 입력하세요.100\n","100원을 반환합니다.\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    728\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 729\u001b[0;31m                 \u001b[0mident\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreply\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msession\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstdin_socket\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    730\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/jupyter_client/session.py\u001b[0m in \u001b[0;36mrecv\u001b[0;34m(self, socket, mode, content, copy)\u001b[0m\n\u001b[1;32m    802\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 803\u001b[0;31m             \u001b[0mmsg_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msocket\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_multipart\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    804\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mzmq\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mZMQError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/zmq/sugar/socket.py\u001b[0m in \u001b[0;36mrecv_multipart\u001b[0;34m(self, flags, copy, track)\u001b[0m\n\u001b[1;32m    624\u001b[0m         \"\"\"\n\u001b[0;32m--> 625\u001b[0;31m         \u001b[0mparts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mflags\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrack\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrack\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    626\u001b[0m         \u001b[0;31m# have first part already, only loop while more to receive\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket.Socket.recv\u001b[0;34m()\u001b[0m\n","\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket.Socket.recv\u001b[0;34m()\u001b[0m\n","\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket._recv_copy\u001b[0;34m()\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/zmq/backend/cython/checkrc.pxd\u001b[0m in \u001b[0;36mzmq.backend.cython.checkrc._check_rc\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: ","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-21-8ae6272e5076>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m     \u001b[0;31m# 실제로는 자판기를 통해서 넣은 금액.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m     \u001b[0mmoney\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"금액을 입력하세요.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    702\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    703\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 704\u001b[0;31m             \u001b[0mpassword\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    705\u001b[0m         )\n\u001b[1;32m    706\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    732\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    733\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 734\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    735\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    736\u001b[0m                 \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["# 자판기의 커피 수량\n","coffee = 5\n","\n","# 일단 작동!\n","while True: #영원히 반복.(infinite loop)\n","    \n","    if coffee ==0:\n","        break\n","\n","    # 실제로는 자판기를 통해서 넣은 금액.\n","    money = int(input(\"금액을 입력하세요.\"))\n","\n","    \n","    if money == 300:\n","        # 실제로 이 파트는 자판기에서 커피를 뽑는 명령으로 대체된다.\n","        print(\"Coffee\")\n","        # 이제 커피를 하나씩 줄인다.\n","        coffee = coffee - 1\n","\n","    elif money < 300:\n","        # 실제로 이 파트는 돈을 반환한다.\n","        print(\"%d원을 반환합니다.\" % money)\n","     \n","    else: # or elif money > 300:\n","        print(\"Coffee\")\n","        # 커피를 뽑아주고\n","        coffee = coffee - 1\n","        # 이제 커피를 하나씩 줄인다.\n","        print(\"%d원을 반환합니다.\" % (money-300))\n","        # 거스름돈을 돌려준다.\n","        \n","        \n","    # 커피가 다 떨어진 경우 알려야한다.\n","print(\"커피가 모두 소진되었으니, 관리자에게 문의해주세요.\")"]},{"cell_type":"markdown","metadata":{"id":"aE4q4U_mkInR"},"source":["#### RE : 실제 자판기 기계는 돈을 한번 넣고 종료되지 않는다. 자판기 기계(프로그램)이 종료되는 경우는 커피가 다 떨어졌을 때이다.\n","\n","> Q. 커피가 다 떨어질 때 까지 자판기 프로그램을 반복하면서 실행한 뒤, 돈을 입력받아서 커피를 주는 프로그램을 작성해보자.\n","\n","> 이번에는 돈이 모자랄 때는, 추가로 돈을 입력받아 300원을 넘는 경우에 커피를 뽑아주는 프로그램을 작성해보자."]},{"cell_type":"code","execution_count":23,"metadata":{"id":"3qRbM9gRkInR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650197201692,"user_tz":-540,"elapsed":110545,"user":{"displayName":"DONG HEE SHIN","userId":"03810046734519443823"}},"outputId":"e4310a4d-5f3e-4f1f-f9a2-33f206e670be"},"outputs":[{"output_type":"stream","name":"stdout","text":["금액을 입력해주세요 : 150\n","돈이 모자랍니다. 추가로 금액을 입력해주세요.\n","금액을 입력해주세요 : 200\n","Coffee\n","50원을 반환합니다.\n","금액을 입력해주세요 : 500\n","Coffee\n","200원을 반환합니다.\n","금액을 입력해주세요 : 300\n","Coffee\n","금액을 입력해주세요 : 200\n","돈이 모자랍니다. 추가로 금액을 입력해주세요.\n","금액을 입력해주세요 : 100\n","Coffee\n","금액을 입력해주세요 : 350\n","Coffee\n","50원을 반환합니다.\n","커피가 모두 소진되었으니, 관리자에게 문의해주세요.\n"]}],"source":["# 자판기의 커피 수량\n","coffee = 5\n","# 거스름돈 보관\n","change=0\n","\n","# 일단 작동!\n","while coffee > 0:\n","\n","    # 실제로는 자판기를 통해서 넣은 금액.\n","    money = int(input(\"금액을 입력해주세요 : \"))\n","    # 잔고와 합쳐서 체크.\n","    money = money + change\n","\n","    \n","    if money == 300:\n","        # 실제로 이 파트는 자판기에서 커피를 뽑는 명령으로 대체된다.\n","        print(\"Coffee\")\n","        # 이제 커피를 하나씩 줄인다.\n","        coffee = coffee - 1\n","\n","    elif money < 300:\n","        # 돈을 더 받자.\n","        print(\"돈이 모자랍니다. 추가로 금액을 입력해주세요.\")\n","        change = money #잔고를 저장.\n","        continue\n","\n","        \n","    else: # or elif money > 300:\n","        print(\"Coffee\")\n","        # 커피를 뽑아주고\n","        coffee = coffee - 1\n","        # 이제 커피를 하나씩 줄인다.\n","        print(\"%d원을 반환합니다.\" % (money-300))\n","        # 거스름돈을 돌려준다.\n","\n","    # 정산\n","    change =0\n","        \n","    # 커피가 다 떨어진 경우 알려야한다.\n","print(\"커피가 모두 소진되었으니, 관리자에게 문의해주세요.\")"]},{"cell_type":"markdown","metadata":{"id":"LRxrNS8GkInR"},"source":["#### 전설의 구구단 구현. nested loop를 연습해보자!"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1Hw2C_kGkInR"},"outputs":[],"source":["# nested loop를 이용하여 구구단을 구현합시다. \n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qybRJqu1kInR"},"outputs":[],"source":[""]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.8"},"colab":{"name":"Chapter.01 파이썬 프로그래밍-08. for, while (실습).ipynb의 사본","provenance":[{"file_id":"1a82BuBfUm2kQcgodUdfm4_DWTwwrp4Zp","timestamp":1650193311673}],"collapsed_sections":[]}},"nbformat":4,"nbformat_minor":0}